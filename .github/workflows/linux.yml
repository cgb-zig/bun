name: Linux

#permissions:
#  contents: read

on:
  workflow_call:
    inputs:
      runs-on:
        type: string
        default: ubuntu-latest
      tag:
        type: string
        required: true
      arch:
        type: string
        required: true
      cpu:
        type: string
        required: true
      assertions:
        type: boolean
        default: false
      deoptimize:
        type: boolean
        default: false
      canary:
        type: boolean
        default: false

jobs:
  build:
    name: Build
    runs-on: ${{ inputs.runs-on }}
    steps:
      - name: Setup Docker
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          platforms: |
            linux/${{ inputs.arch == 'x64' && 'amd64' || 'arm64' }}
      - name: Restore Cache
        uses: actions/cache@v4
        with:
          key: ${{ inputs.tag }}-${{ github.ref_name }}
          restore-keys: |
            ${{ inputs.tag }}-
          path: |
            /ccache
            ${{ runner.temp }}/dockercache
      - name: Build
        uses: docker/build-push-action@v5
        with:
          push: false
          target: artifact
          cache-from: |
            type=local,src=${{ runner.temp }}/dockercache
          cache-to: |
            type=local,dest=${{ runner.temp }}/dockercache,mode=max
          platforms: |
            linux/${{ inputs.arch == 'x64' && 'amd64' || 'arm64' }}
          build-args: |
            GIT_SHA=${{ github.sha }}
            ARCH=${{ inputs.arch == 'x64' && 'x86_64' || 'aarch64' }}
            BUILDARCH=${{ inputs.arch == 'x64' && 'amd64' || 'arm64' }}
            BUILD_MACHINE_ARCH=${{ inputs.arch == 'x64' && 'x86_64' || 'aarch64' }}
            CPU_TARGET=${{ inputs.arch == 'x64' && inputs.cpu || 'native' }}
            ASSERTIONS=${{ inputs.assertions && 'ON' || 'OFF' }}
            ZIG_OPTIMIZE=${{ inputs.deoptimize && 'ReleaseSafe' || 'ReleaseFast' }}
            CANARY=${{ inputs.canary && '1' || '0' }}
          outputs: |
            type=local,dest=${{ runner.temp }}/release
      - name: Prepare
        run: |
          if [ ! -x "$(command -v zip)" ]; then
            sudo apt-get update && sudo apt-get install -y zip --no-install-recommends
          fi
          if [ ! -x "$(command -v strip)" ]; then
            sudo apt-get update && sudo apt-get install -y binutils --no-install-recommends
          fi
          cd ${{ runner.temp }}/release
          chmod +x bun-profile bun
          mkdir bun-${{ inputs.tag }}-profile
          mkdir bun-${{ inputs.tag }}
          strip bun
          mv bun-profile bun-${{ inputs.tag }}-profile/bun-profile
          mv bun bun-${{ inputs.tag }}/bun
          zip -r bun-${{ inputs.tag }}-profile.zip bun-${{ inputs.tag }}-profile
          zip -r bun-${{ inputs.tag }}.zip bun-${{ inputs.tag }}
      - name: Upload bun-${{ inputs.tag }}
        uses: actions/upload-artifact@v4
        with:
          name: bun-${{ inputs.tag }}
          path: ${{runner.temp}}/release/bun-${{ inputs.tag }}.zip
          if-no-files-found: error
      - name: Upload bun-${{ inputs.tag }}-profile
        uses: actions/upload-artifact@v4
        with:
          name: bun-${{ inputs.tag }}-profile
          path: ${{runner.temp}}/release/bun-${{ inputs.tag }}-profile.zip
          if-no-files-found: error
